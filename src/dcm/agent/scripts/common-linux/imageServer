#!/usr/bin/env bash

# Copyright 2008-2013 Enstratius, Inc. 
#
# makeImage - Shell script called to bundle an image and upload it to Amazon S3
# 
# This software is part of the Enstratius Cloud Management System. Only 
# authorized licensees of Enstratius may use this software and only
# in the context of Enstratius-managed virtual servers and machine images. 
# Unauthorized copying or distribution of this software is strictly prohibited.
# Authorized licensees may copy this software onto any machine images
# and/or virtual hosts being managed by the Enstratius system as needed.
#
# FUNCTION
# Enstratius will call this script to bundle your root volume as an Amazon Machine Image
# and upload it to Amazon S3.
#

set -u

BASENAME=`basename $0`
DIRNAME=`dirname $0`
. "$DIRNAME/common_mod"

EC2_HOME=/usr

LOGGER=$DIRNAME/log
logTag="imageServer"

if [ $# -lt 11 ] ; then
   $LOGGER -t "$logTag" "Syntax: imageServer CUSTID SVRID BUNDLE IMGNAME ARCHITECTURE ACCOUNT TARGET ACCESSKEY SECRETKEY CERTFILE PKFILE"
   exit 1
fi

BASENAME=`basename $0`
CUSTOM="$DCM_BASEDIR/custom/bin/$BASENAME"

if [ -x ${CUSTOM} ] ; then
	${CUSTOM} "$@" 2>&1 | $LOGGER -t "$logTag"
	exit_with_pipe_value
fi

if [ -x ${CUSTOM}-pre ] ; then
	${CUSTOM}-pre "$@" 2>&1 | $LOGGER -t "$logTag"
	exit_if_pipe_false
fi

#if [ -d /usr/lib/site_ruby ] ; then
#	export RUBYLIB=/usr/lib/site_ruby
#elif [ -d /usr/lib/ruby/site_ruby ] ; then
#	export RUBYLIB=/usr/lib/ruby/site_ruby
#fi

if ! command -v ruby &>/dev/null ; then
    $LOGGER -t "$logTag" "ec2-bundle-vol requires Ruby, but it doesn't seem to be installed. Exiting"
    exit 10
fi
# This is where Enstratius-rolled images live
if [ -x /opt/ec2-ami-tools/current/bin/ec2-bundle-vol ] ; then
	export EC2BIN=/opt/ec2-ami-tools/current/bin
	export EC2_AMITOOL_HOME=/opt/ec2-ami-tools/current
elif [ -x /usr/local/bin/ec2-bundle-vol ] ; then
	export EC2BIN=/usr/local/bin
elif [ -x /home/ec2/bin/ec2-bundle-vol ] ; then
	export EC2BIN=/home/ec2/bin
elif [ -x /opt/aws/amitools/ec2/bin/ec2-bundle-vol ] ; then
	# Amazon Linux
	export EC2_AMITOOL_HOME=/opt/aws/amitools/ec2
	export EC2_HOME=/opt/aws/apitools/ec2
	export EC2BIN=${EC2_AMITOOL_HOME}/bin
else
	export EC2BIN="$EC2_HOME"/bin
fi

CUSTOMER_ID=${1}
SERVER_ID=${2}
BUNDLE=${3}
IMAGE_NAME=${4}
ARCHITECTURE=${5}
ACCOUNT=${6}
TARGET=${7}
ACCESS_KEY=${8}
SECRET_KEY=${9}
CERTFILE=${10}
PKFILE=${11}

if [ -d "$TARGET" ]; then
   rm -rf "$TARGET"
fi

mkdir -p "$TARGET"

$LOGGER -t "$logTag" "Starting image bundle process..."

if [ ! -f "$PKFILE" ] ; then
	$LOGGER -t "$logTag" "No $PKFILE"
	exit 10
fi

if [ ! -f "$CERTFILE" ] ; then
	$LOGGER -t "$logTag" "No $CERTFILE"	
	exit 11
fi

# Added -i due to https://forums.aws.amazon.com/thread.jspa?messageID=341020
# otherwise you'll have to do the following at first boot (on ubuntu):
# apt-get install --force-yes -q -y --force-reinstall true ubuntu-keyring
# followed by: apt-get update

# This is a little more complicated than it needs to be but we need to
# account for different versions of ec2-ami-tools
# First we try with the `-i` option. If that fails, we fall back to no `-i`.

# The reason for the `-i` option is that ec2-bundle-vol started
# excluding pems and gpg certs thus breaking reimaging from an
# already imaged instance

# First we build the list of files we want to keep.
# We're only going to trust /usr,/var/, /opt and /etc
KEEP_FILES=`find /usr /var /etc /opt -name '*.crt' -o -name '*.gpg' -o -name '*.pem' | tr '\n' ','`
sudo -E ${EC2BIN}/ec2-bundle-vol -i $KEEP_FILES -d ${TARGET} -k ${PKFILE} -c ${CERTFILE} -u ${ACCOUNT} -p ${IMAGE_NAME} -r ${ARCHITECTURE} --batch > /mnt/tmp/bundle.log 2>&1

result=$?
if [ $result -ne 0 ] ; then
	$LOGGER -t "$logTag" "Bundle failed with exit code $result"
   	exit 12
fi

if [ -x ${CUSTOM}-post ] ; then
	${CUSTOM}-post "$@" 2>&1 | $LOGGER -t "$logTag"
	exit_if_pipe_false
fi

$LOGGER -t "$logTag" "Bundle complete."
