#!/bin/bash

# Copyright 2011 enStratus Networks LLC
#
# configureService - Manages the configuration of a newly deployed service.
# 
# This software is part of the enStratus Cloud Management System. Only 
# authorized licensees of enStratus may use this software and only
# in the context of enStratus-managed virtual servers and machine images. 
# Unauthorized copying or distribution of this software is strictly prohibited.
# Authorized licensees may copy this software onto any machine images
# and/or virtual hosts being managed by the enStratus system as needed.
#
# FUNCTION
# This script really does nothing except kick-off the service-specific configuration.
#

set -u

LOGGER=/enstratus/bin/log
logTag="configureService"

$LOGGER -t "$logTag" $0 $@
$LOGGER -t "$logTag" -v "UserID=$1, CustomerID=$2, ServiceID=$3, SSLAddress=${4-}, CertFilePath=${5-}, KeyFilePath=${6-}, ChainFilePath=${7-}"

if [ $# -lt 3 ] ; then
   $LOGGER -t "$logTag" "Syntax: configureService USER_ID CUSTOMER_ID SERVICE_ID [SSL_ADDRESS] [CERT_FILE_PATH] [KEY_FILE_PATH] [CHAIN_FILE_PATH]"
   $LOGGER -t "$logTag" "exit 1" at Line \#$LINENO; exit 1
fi

BACKUP_DIR=/var/log/enstratus/files

# Create a directory for file backup.
if [ ! -d $BACKUP_DIR ]; then
        sudo mkdir -p $BACKUP_DIR
        sudo chown enstratus:enstratus $BACKUP_DIR
fi

case  $#  in  #check the number of command line arguments, fail if there is an invalid number of arguments, otherwise assign variables
  3)  USER_ID=$1
      CUSTOMER_ID=$2
      SERVICE_ID=$3;;
  6)  USER_ID=$1
      CUSTOMER_ID=$2
      SERVICE_ID=$3
      SSL_ADDRESS=$4
      CERT_FILE_PATH=$5
      KEY_FILE_PATH=$6
      cert_filename=$(basename ${CERT_FILE_PATH})
      key_filename=$(basename ${KEY_FILE_PATH})
      # Key file backup for debug.
      cp $CERT_FILE_PATH ${BACKUP_DIR}/${cert_filename}
      cp $KEY_FILE_PATH ${BACKUP_DIR}/${key_filename};;
  7)  USER_ID=$1
      CUSTOMER_ID=$2
      SERVICE_ID=$3
      SSL_ADDRESS=$4
      CERT_FILE_PATH=$5
      KEY_FILE_PATH=$6
      CHAIN_FILE_PATH=$7
      cert_filename=$(basename ${CERT_FILE_PATH})
      key_filename=$(basename ${KEY_FILE_PATH})
      chain_filename=$(basename ${CHAIN_FILE_PATH})
      # Key file backup for debug.
      cp $CERT_FILE_PATH ${BACKUP_DIR}/${cert_filename}
      cp $KEY_FILE_PATH ${BACKUP_DIR}/${key_filename}
      cp $CHAIN_FILE_PATH ${BACKUP_DIR}/${chain_filename};;
  *)  $LOGGER -t "$logTag" "$# is an invalid number of arguments"
	$LOGGER -t "$logTag" "exit 3" at Line \#$LINENO
	exit 3;; #exit with failure status
esac


CONFIGURE="/mnt/services/${SERVICE_ID}/bin/enstratus-configure"
PROPS="/mnt/services/${SERVICE_ID}/cfg/enstratus.cfg"

if [ -r "$PROPS" ] ; then
	sudo bash -c "tr -d '\015' < $PROPS > ${PROPS}.tmp && mv ${PROPS}.tmp $PROPS"
        sudo chown ${USER_ID}:enstratus "$PROPS"
        sudo chmod 640 "$PROPS"
fi

if [ -e "$CONFIGURE" ] ; then
  case  $#  in  #check the number of command line arguments, fail if there is an invalid number of arguments, otherwise assign variables
    3) sudo "$CONFIGURE" $SERVICE_ID "$PROPS" 2>&1 | $LOGGER -t "$logTag";;
    6) sudo "$CONFIGURE" $SERVICE_ID "$PROPS" $SSL_ADDRESS $CERT_FILE_PATH $KEY_FILE_PATH 2>&1 | $LOGGER -t "$logTag";;
    7) sudo "$CONFIGURE" $SERVICE_ID "$PROPS" $SSL_ADDRESS $CERT_FILE_PATH $KEY_FILE_PATH $CHAIN_FILE_PATH 2>&1 | $LOGGER -t "$logTag";;
  esac
fi

$LOGGER -t "$logTag" "exit $?" at Line \#$LINENO; exit $?
