#!/usr/bin/env bash

# Copyright 2011-2013 Enstratius, Inc.
#
# calculateStats - Shell script called periodically to create a properties file with resource utilization
# 
# This software is part of the Enstratius Cloud Management System. Only 
# authorized licensees of Enstratius may use this software and only
# in the context of Enstratius-managed virtual servers and machine images. 
# Unauthorized copying or distribution of this software is strictly prohibited.
# Authorized licensees may copy this software onto any machine images
# and/or virtual hosts being managed by the Enstratius system as needed.
#
# FUNCTION
# Enstratius calls this script periodically to recalculate resource usage on the server. The script
# prints out a file in the form:
# property=value
# It is expected to output the following properties:
# cpuCount - current number of CPU cores
# cpuLoad - current server load
# cpuUtilization - utilization of the server (or, alternately, cpuUser and cpuSys)
# currentRam - amount of RAM currently in use (in MB)
# maxRam - total RAM on the system (in MB)
# processes - current number of processes executing on the server
# deviceTotal.DEVICE - total disk space in GB on a device (example: deviceTotal.sdh=10)
# deviceUsed.DEVICE - total disk space in GB in use on a device (example: deviceUsed.sdh=5)
#
# HOW TO EXTEND THIS SCRIPT (aka DO NOT EDIT THIS SCRIPT)
# You can extend or replace this script by setting up your own executables in /enstratus/custom/bin:
# * /enstratus/custom/bin/calculateStats - if exists, will completely replace this script

set -u

. "/enstratus/bin/common_mod"

if [ $# -lt 1 ] ; then
   echo "Syntax: calculateStats PROPSFILE"
   exit 1
fi

PROPSFILE=${1}
BASENAME=`basename $0`
CUSTOM=/enstratus/custom/bin/${BASENAME}

if [ -x ${CUSTOM} ] ; then
	${CUSTOM} "$@"
	exit_with_pipe_value
fi

TFILE=${PROPSFILE}.tmp

processes=$(ps -e | wc -l)
if [ $? != 0 ] ; then # old style ps
	processes=$(ps -auxw | wc -l)
fi
echo "processes=${processes}" > ${TFILE}

cpucount=1
if [ -f /proc/cpuinfo ] ; then
	cpucount=$(grep processor /proc/cpuinfo  | wc -l)
elif [ -x /usr/sbin/psrinfo ] ; then
	cpucount=$(/usr/sbin/psrinfo -v | grep Status | wc -l)
fi
echo "cpuCount=${cpucount}" >> ${TFILE}

load=$(uptime | awk '/ load / {print $12}' | sed 's/,//')
if [[ ${load} == "" ]] ; then
	load=$(uptime | awk '/ load / {print $11}' | sed 's/,//')
	if [[ ${load} == "" ]] ; then
		load=$(uptime | awk '/ load / {print $10}' | sed 's/,//')
	fi
fi
echo "cpuLoad=${load}" >> ${TFILE}

util=$(mpstat | awk '/ all / {print $4}')
if [ $? == 0 ] ; then
	echo "cpuUser=${util}" >> ${TFILE}
fi

util=$(mpstat | awk '/ all / {print $6}')
if [ $? == 0 ] ; then
	echo "cpuSys=${util}" >> ${TFILE}
fi

mem=$(free -m | awk '/Mem/ {print $2}')
if [ $? == 0 ] ; then
	echo "maxRam=${mem}" >> ${TFILE}
fi

mem=$(free -m | awk '/Mem/ {print $3}')
if [ $? == 0 ] ; then
	echo "currentRam=${mem}" >> ${TFILE}
fi

# Device usuage stats
dev_list=$(df -BG -x tmpfs -x devtmpfs | sed '/^Filesystem/d')
echo "$dev_list" | while read -r line
do
        dev_name=$(echo "$line" | sed -rn 's/\/dev\/([[:alnum:]]*)[[:space:]]+.*/\1/p' )
        dev_total=$(echo "$line" | awk '{print $2}' | tr -d 'G' )
        dev_used=$(echo "$line" | awk '{print $3}' | tr -d 'G' )
        echo "deviceTotal.${dev_name}=${dev_total}" >> ${TFILE}
        echo "deviceUsed.${dev_name}=${dev_used}" >> ${TFILE}
done

mv ${TFILE} ${PROPSFILE}
