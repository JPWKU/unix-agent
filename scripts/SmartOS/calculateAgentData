#!/bin/bash

# Copyright 2011 enStratus Networks LLC
#
# calculateStats - Shell script called periodically to create a properties file with resource utilization
# 
# This software is part of the enStratus Cloud Management System. Only 
# authorized licensees of enStratus may use this software and only
# in the context of enStratus-managed virtual servers and machine images. 
# Unauthorized copying or distribution of this software is strictly prohibited.
# Authorized licensees may copy this software onto any machine images
# and/or virtual hosts being managed by the enStratus system as needed.
#
# FUNCTION
# enStratus calls this script periodically to recalculate resource usage on the server. The script
# prints out a file in the form:
# property=value
# It is expected to output the following properties:
# cpuCount - current number of CPU cores
# cpuLoad - current server load
# cpuUtilization - utilization of the server (or, alternately, cpuUser and cpuSys)
# currentRam - amount of RAM currently in use (in MB)
# maxRam - total RAM on the system (in MB)
# processes - current number of processes executing on the server
# deviceTotal.DEVICE - total disk space in GB on a device (example: deviceTotal.sdh=10)
# deviceUsed.DEVICE - total disk space in GB in use on a device (example: deviceUsed.sdh=5)
#
# HOW TO EXTEND THIS SCRIPT (aka DO NOT EDIT THIS SCRIPT)
# You can extend or replace this script by setting up your own executables in /opt/local/enstratus/custom/bin:
# * /opt/local/enstratus/custom/bin/calculateStats - if exists, will completely replace this script

set -u

if [ $# -lt 1 ] ; then
   echo "Syntax: calculateStats PROPSFILE"
   exit 1
fi

PROPSFILE=${1}
BASENAME=`basename $0`
CUSTOM=/opt/local/enstratus/custom/bin/${BASENAME}

if [ -x ${CUSTOM} ] ; then
	${CUSTOM} "$@"
	exit $?
fi

TFILE=${PROPSFILE}.tmp

processes=$(ps -e | wc -l)
if [ $? != 0 ] ; then # old style ps
	processes=$(ps -auxw | wc -l)
fi
echo "processes=${processes}" > ${TFILE}

cpucount=1
if [ -f /proc/cpuinfo ] ; then
	cpucount=$(grep processor /proc/cpuinfo  | wc -l)
elif [ -x /usr/sbin/psrinfo ] ; then
	cpucount=$(/usr/sbin/psrinfo -v | grep Status | wc -l)
fi
echo "cpuCount=${cpucount}" >> ${TFILE}

load=$(uptime | grep load)
echo "cpuLoad=${load##*, }" >> ${TFILE}

util=$(mpstat -a | grep -vw SET | awk '{print $13}')
if [ $? == 0 ] ; then
	echo "cpuUser=${util}" >> ${TFILE}
fi

util=$(mpstat -a | grep -vw SET | awk '{print $14}')
if [ $? == 0 ] ; then
	echo "cpuSys=${util}" >> ${TFILE}
fi

mem=$(($(kstat -p -c zone_memory_cap -s physcap |\
         awk '{print $2}')/1024/1024))
if [ $? == 0 ] ; then
	echo "maxRam=${mem}" >> ${TFILE}
fi

mem=$(($(kstat -p -c zone_memory_cap -s rss |\
         awk '{print $2}')/1024/1024))
if [ $? == 0 ] ; then
	echo "currentRam=${mem}" >> ${TFILE}
fi

mv ${TFILE} ${PROPSFILE}
