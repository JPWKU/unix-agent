#!/bin/bash

# Copyright 2011 enStratus Networks LLC
#
# calculateStats - Shell script called periodically to create a properties file with resource utilization
# 
# This software is part of the enStratus Cloud Management System. Only 
# authorized licensees of enStratus may use this software and only
# in the context of enStratus-managed virtual servers and machine images. 
# Unauthorized copying or distribution of this software is strictly prohibited.
# Authorized licensees may copy this software onto any machine images
# and/or virtual hosts being managed by the enStratus system as needed.
#
# FUNCTION
# enStratus calls this script periodically to recalculate resource usage on the server. The script
# prints out a file in the form:
# property=value
# It is expected to output the following properties:
# cpuCount - current number of CPU cores
# cpuLoad - current server load
# cpuUtilization - utilization of the server (or, alternately, cpuUser and cpuSys)
# currentRam - amount of RAM currently in use (in MB)
# maxRam - total RAM on the system (in MB)
# processes - current number of processes executing on the server
# deviceTotal.DEVICE - total disk space in GB on a device (example: deviceTotal.sdh=10)
# deviceUsed.DEVICE - total disk space in GB in use on a device (example: deviceUsed.sdh=5)
# externalTx - outgoing network traffic to public addresses.
# externalRx - incoming network traffic from public addresses.
# internalTx - outgoing network traffic to private addresses.
# internalRx - incoming network traffic from private addresses.
#
# HOW TO EXTEND THIS SCRIPT (aka DO NOT EDIT THIS SCRIPT)
# You can extend or replace this script by setting up your own executables in /enstratus/custom/bin:
# * /enstratus/custom/bin/calculateStats - if exists, will completely replace this script

LOGGER=/enstratus/bin/log
logTag="calculateAgentData"

$LOGGER -t "$logTag" -i $0 $@
$LOGGER -t "$logTag" -i -v "properties file=$1"

set -u

# function for calculating network traffic.
calculate_trf () {
	priv_tx=0
	priv_rx=0
	RAW_DATA=$(sudo iptables -nvx -L | grep "Accounting" | sed 's/\*/all/g')
	while read -r line; do
		if [[ $line == *"private tx"* ]]; then
			priv_tx_chunk=$(echo $line | cut -d' ' -f2)
			((priv_tx+=$priv_tx_chunk))
		elif [[ $line == *"private rx"* ]]; then
			priv_rx_chunk=$(echo $line | cut -d' ' -f2)
			((priv_rx+=$priv_rx_chunk))
		elif [[ $line == *"total tx"* ]]; then
			total_tx=$(echo $line | cut -d' ' -f2)
		elif [[ $line == *"total rx"* ]]; then
			total_rx=$(echo $line | cut -d' ' -f2)
		fi
	done <<< "$RAW_DATA"

	pub_tx=$((total_tx-priv_tx))
	pub_rx=$((total_rx-priv_rx))
}

if [ $# -lt 1 ] ; then
   echo "Syntax: calculateStats PROPSFILE" | $LOGGER -t "$logTag"
   $LOGGER -t "$logTag" "exit 1" at Line \#$LINENO; exit 1
fi

PROPSFILE=${1}
BASENAME=`basename $0`
CUSTOM=/enstratus/custom/bin/${BASENAME}

if [ -x ${CUSTOM} ] ; then
	${CUSTOM} "$@"
	$LOGGER -t "$logTag" "exit $?" at Line \#$LINENO; exit $?
fi

TFILE=${PROPSFILE}.tmp

processes=$(ps -e | wc -l)
if [ $? != 0 ] ; then # old style ps
	processes=$(ps -auxw | wc -l)
fi
echo "processes=${processes}" > ${TFILE}

cpucount=1
if [ -f /proc/cpuinfo ] ; then
	cpucount=$(grep processor /proc/cpuinfo  | wc -l)
elif [ -x /usr/sbin/psrinfo ] ; then
	cpucount=$(/usr/sbin/psrinfo -v | grep Status | wc -l)
fi
echo "cpuCount=${cpucount}" >> ${TFILE}

load=$(uptime | awk '/ load / {print $12}' | sed 's/,//')
if [[ ${load} == "" ]] ; then
	load=$(uptime | awk '/ load / {print $11}' | sed 's/,//')
	if [[ ${load} == "" ]] ; then
		load=$(uptime | awk '/ load / {print $10}' | sed 's/,//')
	fi
fi
echo "cpuLoad=${load}" >> ${TFILE}

util=$(mpstat | awk '/ all / {print $4}')
if [ $? == 0 ] ; then
	echo "cpuUser=${util}" >> ${TFILE}
fi

util=$(mpstat | awk '/ all / {print $6}')
if [ $? == 0 ] ; then
	echo "cpuSys=${util}" >> ${TFILE}
fi

mem=$(free -m | awk '/Mem/ {print $2}')
if [ $? == 0 ] ; then
	echo "maxRam=${mem}" >> ${TFILE}
fi

mem=$(free -m | awk '/Mem/ {print $3}')
if [ $? == 0 ] ; then
	echo "currentRam=${mem}" >> ${TFILE}
fi

# caculate network traffic.
INTERVAL=5

calculate_trf

pub_tx0=$pub_tx
pub_rx0=$pub_rx
priv_tx0=$priv_tx
priv_rx0=$priv_rx

sleep $INTERVAL

calculate_trf

bps_pub_tx=$( echo "scale=3; ( $pub_tx - $pub_tx0 ) / $INTERVAL / 1000" | bc )
bps_pub_rx=$( echo "scale=3; ( $pub_rx - $pub_rx0 ) / $INTERVAL / 1000" | bc )
bps_priv_tx=$( echo "scale=3; ( $priv_tx - $priv_tx0 ) / $INTERVAL / 1000" | bc )
bps_priv_rx=$( echo "scale=3; ( $priv_rx - $priv_rx0 ) / $INTERVAL / 1000" | bc )

printf "externalTx=%.3f KB/S\n" $bps_pub_tx >> ${TFILE}
printf "externalRx=%.3f KB/S\n" $bps_pub_rx >> ${TFILE}
printf "internalTx=%.3f KB/S\n" $bps_priv_tx >> ${TFILE}
printf "internalRx=%.3f KB/S\n" $bps_priv_rx >> ${TFILE}

# Device usuage stats
dev_list=$(df -BG -x tmpfs -x devtmpfs | sed '/^Filesystem/d')
echo "$dev_list" | while read -r line
do
        dev_name=$(echo "$line" | sed -rn 's/\/dev\/([[:alnum:]]*)[[:space:]]+.*/\1/p' )
        dev_total=$(echo "$line" | awk '{print $2}' | tr -d 'G' )
        dev_used=$(echo "$line" | awk '{print $3}' | tr -d 'G' )
        echo "deviceTotal.${dev_name}=${dev_total}" >> ${TFILE}
        echo "deviceUsed.${dev_name}=${dev_used}" >> ${TFILE}
done

mv ${TFILE} ${PROPSFILE}

$LOGGER -t "$logTag" -i "exit $?" at Line \#$LINENO; exit $?
